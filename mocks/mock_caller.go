// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Caller is an autogenerated mock type for the Caller type
type Caller struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, method, params, result
func (_m *Caller) Call(ctx context.Context, method string, params map[string]interface{}, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, method, params, result)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, method, params, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, method, params, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, interface{}) error); ok {
		r1 = rf(ctx, method, params, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCaller creates a new instance of Caller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Caller {
	mock := &Caller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
