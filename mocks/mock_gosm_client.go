// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/CosmWasm/wasmd/x/wasm/types"
)

// GosmClient is an autogenerated mock type for the GosmClient type
type GosmClient struct {
	mock.Mock
}

// QuerySmartContractState provides a mock function with given fields: ctx, address, query
func (_m *GosmClient) QuerySmartContractState(ctx context.Context, address string, query interface{}) (*types.QuerySmartContractStateResponse, error) {
	ret := _m.Called(ctx, address, query)

	if len(ret) == 0 {
		panic("no return value specified for QuerySmartContractState")
	}

	var r0 *types.QuerySmartContractStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*types.QuerySmartContractStateResponse, error)); ok {
		return rf(ctx, address, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *types.QuerySmartContractStateResponse); ok {
		r0 = rf(ctx, address, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QuerySmartContractStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, address, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGosmClient creates a new instance of GosmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGosmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GosmClient {
	mock := &GosmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
